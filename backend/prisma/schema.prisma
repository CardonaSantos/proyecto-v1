// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Usuario {
  id                    Int              @id @default(autoincrement())
  nombre                String
  correo                String           @unique
  contrasena            String
  rol                   Rol
  ubicaciones           Ubicacion[]
  citas                 Cita[]           @relation("CitasUsuario")
  ventas                Venta[]
  solicitudesDescuento  SolicitudDescuento[]
  notificacionesEnviadas Notificacion[]  @relation("NotificacionesEnviadas")
  notificacionesRecibidas Notificacion[] @relation("NotificacionesRecibidas")
  registrosAsistencia   Asistencia[]

  creadoEn              DateTime         @default(now())
  actualizadoEn         DateTime         @updatedAt
}

model Ubicacion {
  id        Int      @id @default(autoincrement())
  latitud   Float
  longitud  Float
  timestamp DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
}

model Cliente {
  id                 Int                 @id @default(autoincrement())
  nombre             String
  correo             String              @unique
  telefono           String
  direccion          String
  ventas             Venta[]
  citas              Cita[]
  solicitudesDescuento SolicitudDescuento[]
  creadoEn           DateTime            @default(now())
  actualizadoEn      DateTime            @updatedAt
}

model Cita {
  id           Int      @id @default(autoincrement())
  inicio       DateTime
  fin          DateTime?
  activa       Boolean  @default(true)
  vendedor     Usuario  @relation("CitasUsuario", fields: [usuarioId], references: [id])
  usuarioId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id])
  clienteId    Int
  reporte      String?
  venta        Venta?
}




model Categoria {
  id         Int                 @id @default(autoincrement())
  nombre     String
  productos  ProductoCategoria[] // Relación a la tabla intermedia ProductoCategoria

  creadoEn   DateTime            @default(now())
  actualizadoEn DateTime         @updatedAt
}

model Producto {
  id          Int                @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float              // Precio de venta del producto
  stock       Stock?             // Relación uno a uno con Stock
  categorias  ProductoCategoria[] // Relación a la tabla intermedia ProductoCategoria
  ventas      VentaProducto[]    // Relación a la tabla intermedia VentaProducto
  entregas    EntregaStockProducto[] // Relación a la tabla intermedia EntregaStockProducto

  codigoProducto String          @unique// NUEVO A APLICAR
  creadoEn    DateTime           @default(now())
  actualizadoEn DateTime         @updatedAt
}


model ProductoCategoria {
  id          Int        @id @default(autoincrement())
  producto    Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int
  categoria   Categoria   @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  categoriaId Int

  creadoEn    DateTime    @default(now())
  actualizadoEn DateTime  @updatedAt
}

model EntregaStock {
  id           Int                    @id @default(autoincrement())
  proveedor    Proveedor               @relation(fields: [proveedorId], references: [id])
  proveedorId  Int
  timestamp    DateTime                @default(now()) // Fecha de la entrega
  productos    EntregaStockProducto[]  // Relación con los productos entregados

  creadoEn     DateTime                @default(now())
  actualizadoEn DateTime               @updatedAt
}

model EntregaStockProducto {
  id           Int        @id @default(autoincrement())
  producto     Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId   Int
  entregaStock EntregaStock @relation(fields: [entregaStockId], references: [id], onDelete: Cascade)
  entregaStockId Int
  cantidad     Int         // Cantidad de este producto en esta entrega
  costoUnitario Float      // Costo por unidad de este producto en esta entrega
}


model Stock {
  id          Int       @id @default(autoincrement())
  producto    Producto   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int        @unique
  proveedor   Proveedor  @relation(fields: [proveedorId], references: [id])
  proveedorId Int
  cantidad    Int        // Cantidad total de este producto en stock
  costoTotal  Float      // Costo total de adquisición de todos los productos en stock  creadoEn    DateTime   @default(now())
  actualizadoEn DateTime @updatedAt
}


model Proveedor {
  id          Int       @id @default(autoincrement())
  nombre      String
  correo      String    @unique
  telefono    String
  direccion   String?
  productos   Stock[]   // Relación con el stock de productos
  entregas    EntregaStock[]  // Relación con las entregas de stock

  creadoEn    DateTime  @default(now())
  actualizadoEn DateTime @updatedAt
}



model Venta {
  id           Int      @id @default(autoincrement())
  monto        Float
  descuento     Int//NUEVO A APLICAR
  timestamp    DateTime @default(now())
  vendedor     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id])
  clienteId    Int
  cita         Cita?    @relation(fields: [citaId], references: [id])//si se realizó en una cita
  citaId       Int?     @unique
  productos    VentaProducto[]  // Relación a la tabla intermedia VentaProducto
}

model VentaProducto {
  id          Int      @id @default(autoincrement())
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade) // Añadir Cascade aquí
  productoId  Int
  venta       Venta     @relation(fields: [ventaId], references: [id], onDelete: Cascade) // Si también necesitas eliminar las ventas asociadas
  ventaId     Int
  cantidad    Int
  precio      Float
  creadoEn    DateTime  @default(now())
}



model SolicitudDescuento {
  id           Int      @id @default(autoincrement())
  porcentaje   Float
  estado       String   @default("pendiente")
  vendedor     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id])
  clienteId    Int
  creadoEn     DateTime @default(now())
}

model Notificacion {
  id              Int      @id @default(autoincrement())
  mensaje         String
  leido           Boolean  @default(false)
  remitente       Usuario  @relation("NotificacionesEnviadas", fields: [remitenteId], references: [id])
  remitenteId     Int
  destinatario    Usuario  @relation("NotificacionesRecibidas", fields: [destinatarioId], references: [id])
  destinatarioId  Int
  creadoEn        DateTime @default(now())
}

model Asistencia {
  id              Int      @id @default(autoincrement())
  entrada         DateTime
  salida          DateTime?
  usuario         Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId       Int
}

enum Rol {
  ADMIN
  VENDEDOR
}
